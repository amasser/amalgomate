// Copyright 2016 Palantir Technologies, Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

const mainTemplate = `// generated by amalgomate; DO NOT EDIT
package main

import (
	"fmt"
	"os"
	"sort"
)

var programs = map[string]func() {
}

func main() {
	if len(os.Args) < 2 {
		fmt.Println("Missing program argument. Valid values:", cmds())
		os.Exit(1)
	}

	programName := os.Args[1]
	if _, ok := programs[programName]; !ok {
		fmt.Printf("Unknown program: \"%v\". Valid values: %v\n", programName, cmds())
		os.Exit(1)
	}

	os.Args = append([]string{os.Args[0]}, os.Args[2:]...)
	programs[programName]()
}

func cmds() []string {
	var cmds []string
	for key := range programs {
		cmds = append(cmds, key)
	}
	sort.Strings(cmds)
	return cmds
}
`

const libraryTemplate = `// generated by amalgomate; DO NOT EDIT
package amalgomated

import (
	"fmt"
	"sort"
)

var programs = map[string]func() {
}

func Instance() Amalgomated {
	return &amalgomated{}
}

type Amalgomated interface {
	Run(cmd string)
	Cmds() []string
}

type amalgomated struct{}

func (a *amalgomated) Run(cmd string) {
	if _, ok := programs[cmd]; !ok {
		panic(fmt.Sprintf("Unknown command: \"%v\". Valid values: %v", cmd, a.Cmds()))
	}
	programs[cmd]()
}

func (a *amalgomated) Cmds() []string {
	var cmds []string
	for key := range programs {
		cmds = append(cmds, key)
	}
	sort.Strings(cmds)
	return cmds
}
`
